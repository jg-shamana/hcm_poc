# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "develop" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: ["develop"]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: "Deployment target (resource prefix)"
        required: true
        default: "cdk"
        type: choice
        options:
          - cdk
          - cfn
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      aws_region:
        description: "AWS Region"
        required: true
        default: "ap-south-1"
        type: string

env:
  AWS_REGION: ${{ github.event.inputs.aws_region || 'ap-south-1' }}
  # Default values for automatic push deployment (existing CDK-less resources)
  ECR_REPOSITORY: ${{ github.event.inputs.deployment_target && format('{0}-hcm-poc-{1}', github.event.inputs.deployment_target, github.event.inputs.environment || 'dev') || 'hcm-poc-dev' }}
  ECS_SERVICE: ${{ github.event.inputs.deployment_target && format('{0}-hcm-poc-service-{1}', github.event.inputs.deployment_target, github.event.inputs.environment || 'dev') || 'hcm-poc-service-dev' }}
  ECS_CLUSTER: ${{ github.event.inputs.deployment_target && format('{0}-hcm-poc-cluster-{1}', github.event.inputs.deployment_target, github.event.inputs.environment || 'dev') || 'hcm-poc-cluster-dev' }}
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: AppContainer

permissions:
  contents: read

jobs:
  # Manual approval job for manual workflow dispatch
  approval:
    if: github.event_name == 'workflow_dispatch'
    name: 🔍 Deployment Approval
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment == 'prod' && 'production' || 'develop' }}

    steps:
      - name: Display deployment plan
        run: |
          echo "📋 Deployment Plan Review"
          echo "========================="
          echo "🎯 Target: ${{ github.event.inputs.deployment_target || 'cdk' }} prefixed resources"
          echo "🌍 Environment: ${{ github.event.inputs.environment || 'dev' }}"
          echo "🗺️  Region: ${{ github.event.inputs.aws_region || 'ap-south-1' }}"
          echo ""
          echo "📦 Resources to be used:"
          echo "  ECR Repository: ${{ env.ECR_REPOSITORY }}"
          echo "  ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "  ECS Service: ${{ env.ECS_SERVICE }}"
          echo ""
          echo "⚠️  This deployment will update the existing ECS service"
          echo "    with a new container image version."
          echo ""
          echo "✅ Deployment approved by environment protection rules"

    outputs:
      deployment_target: ${{ github.event.inputs.deployment_target }}
      environment: ${{ github.event.inputs.environment }}

  # Deploy job for automatic push
  deploy-auto:
    if: github.event_name == 'push'
    name: Deploy (Auto)
    runs-on: ubuntu-latest
    environment: develop

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_SERVICE }} \
            --query 'taskDefinition' \
            --output json > current-task-definition.json

          # Remove fields that cannot be used in register-task-definition
          cat current-task-definition.json | \
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deployment summary
        run: |
          echo "🚀 Automatic deployment completed successfully!"
          echo "Target: default (no prefix)"
          echo "Environment: dev"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "ECR Repository: ${{ env.ECR_REPOSITORY }}"
          echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "ECS Service: ${{ env.ECS_SERVICE }}"
          echo "Container Image: ${{ steps.build-image.outputs.image }}"

  # Deploy job for manual workflow dispatch (after approval)
  deploy-manual:
    if: github.event_name == 'workflow_dispatch'
    name: Deploy (Manual)
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment == 'prod' && 'production' || 'develop' }}
    needs: approval

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_SERVICE }} \
            --query 'taskDefinition' \
            --output json > current-task-definition.json

          # Remove fields that cannot be used in register-task-definition
          cat current-task-definition.json | \
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
          > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deployment summary
        run: |
          echo "🚀 Manual deployment completed successfully!"
          echo "Target: ${{ github.event.inputs.deployment_target }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "ECR Repository: ${{ env.ECR_REPOSITORY }}"
          echo "ECS Cluster: ${{ env.ECS_CLUSTER }}"
          echo "ECS Service: ${{ env.ECS_SERVICE }}"
          echo "Container Image: ${{ steps.build-image.outputs.image }}"
